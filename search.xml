<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2023/01/23/README/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><h2 id="spring-errors"><a href="#spring-errors" class="headerlink" title="spring-errors"></a>spring-errors</h2><ul>
<li><a href="./spring-errors/errors.md">springboot错误</a></li>
</ul>
<h2 id="spring-why"><a href="#spring-why" class="headerlink" title="spring-why"></a>spring-why</h2><ul>
<li><a href="./spring-why/ioc-tutor.md">依赖注入的简单理解</a></li>
</ul>
<h2 id="springboot-1"><a href="#springboot-1" class="headerlink" title="springboot"></a>springboot</h2><ul>
<li><a href="./add-annotation.md">添加注解</a></li>
<li><a href="./add-static-files.md">添加静态文件</a></li>
<li><a href="./annotation-tips.md">注解的作用</a></li>
<li><a href="./common-annotation.md">常用注解解析</a></li>
<li><a href="./java-jwt.md">java-jwt使用</a></li>
<li><a href="./other-frameworks.md">其他api框架</a></li>
<li><a href="./spring-boot-starter-quartz.md">quartz教程</a></li>
<li><a href="./spring-controller.md">springboot使用controll</a></li>
<li><a href="./spring-cors.md">spring跨域处理</a></li>
<li><a href="./spring-log.md">Java日志框架SLF4J和log4j</a></li>
<li><a href="./springboot-upgrade.md">springboot升级</a></li>
<li><a href="./springdoc.md">spring-openapi-ui使用</a></li>
<li><a href="./swaggerui.md">使用swaggerui</a></li>
<li><a href="./templates.md">java模板引擎</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/add-static-files/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="添加静态文件"><a href="#添加静态文件" class="headerlink" title="添加静态文件"></a>添加静态文件</h1><h2 id="第一种-使用property文件"><a href="#第一种-使用property文件" class="headerlink" title="第一种,使用property文件"></a>第一种,使用property文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.mvc.<span class="keyword">static</span>-path-pattern=/<span class="keyword">static</span><span class="comment">/**</span></span><br><span class="line"><span class="comment">spring.resources.static-locations=classpath:/static/</span></span><br></pre></td></tr></table></figure>

<h2 id="第二种-使用自定义"><a href="#第二种-使用自定义" class="headerlink" title="第二种,使用自定义"></a>第二种,使用自定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态资源映射</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/static/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入<a href="http://localhost:8080/static/java.png">http://localhost:8080/static/java.png</a>就可以访问了</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/annotation-tips/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="注解的作用"><a href="#注解的作用" class="headerlink" title="注解的作用"></a>注解的作用</h1><p>本文打算介绍几个不太容易说出其区别，或者用途的 Spring 注解，比如 @Component 与 @Bean 的比较，@ControllerAdvice 是如何处理自定义异常的等等。</p>
<h2 id="Spring-中的一些注解"><a href="#Spring-中的一些注解" class="headerlink" title="Spring 中的一些注解"></a><strong>Spring 中的一些注解</strong></h2><h3 id="1-Component-和-Bean-的区别是什么？"><a href="#1-Component-和-Bean-的区别是什么？" class="headerlink" title="1. @Component 和 @Bean 的区别是什么？"></a><strong>1. @Component 和 @Bean 的区别是什么？</strong></h3><ol>
<li>作用对象不同：@Component 注解作用于类，而 @Bean 注解作用于方法、</li>
<li>@Component 通常是通过路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 告诉了 Spring 这是某个类的实例，当我们需要用它的时候还给我。</li>
<li>@Bean 注解比 @Component 注解的自定义性更强，而且很多地方我们只能通过 @Bean 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 Spring 容器时，只能通过 @Bean 来实现。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//注解使用示例：</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;     </span><br><span class="line">    <span class="meta">@Bean</span> <span class="keyword">public</span> TransferService <span class="title function_">transferService</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransferServiceImpl</span>();     &#125; &#125; </span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//注解使用示例：</span></span><br><span class="line"><span class="meta">@Component</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AService</span> &#123;     .... &#125; </span><br><span class="line"><span class="comment">//下面这个例子是通过 </span></span><br><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="comment">//无法实现的：</span></span><br><span class="line"><span class="meta">@Bean</span> <span class="keyword">public</span> OneService <span class="title function_">getService</span><span class="params">(status)</span> &#123; <span class="keyword">case</span> (status)  &#123; when <span class="number">1</span>: <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">serviceImpl1</span>(); when <span class="number">2</span>: <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">serviceImpl2</span>(); when <span class="number">3</span>: <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">serviceImpl3</span>();     &#125; &#125; </span><br></pre></td></tr></table></figure>

<h3 id="2-Autowire-和-Resource-的区别"><a href="#2-Autowire-和-Resource-的区别" class="headerlink" title="2. Autowire 和 @Resource 的区别"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUyNDc0NjM0Nw==&mid=2247492574&idx=2&sn=f27a39ad8bf4540785d08d7d4be889df&chksm=fa2a08dacd5d81cc3b043fcf01b6b0d9f12e0ed43f02a97c0941c5d325d989c6af5fb0276dc7&scene=21#wechat_redirect">2. Autowire 和 @Resource 的区别</a></h3><ol>
<li>@Autowire 和 @Resource都可以用来装配bean，都可以用于字段或setter方法。<a href="https://mp.weixin.qq.com/s?__biz=MzUyNDc0NjM0Nw==&mid=2247492574&idx=2&sn=f27a39ad8bf4540785d08d7d4be889df&chksm=fa2a08dacd5d81cc3b043fcf01b6b0d9f12e0ed43f02a97c0941c5d325d989c6af5fb0276dc7&scene=21#wechat_redirect">Spring Boot 学习笔记</a>分享给你。</li>
<li>@Autowire 默认按类型装配，默认情况下必须要求依赖对象必须存在，如果要允许 null 值，可以设置它的 required 属性为 false。</li>
<li>@Resource 默认按名称装配，当找不到与名称匹配的 bean 时才按照类型进行装配。名称可以通过 name 属性指定，如果没有指定 name 属性，当注解写在字段上时，默认取字段名，当注解写在 setter 方法上时，默认取属性名进行装配。</li>
</ol>
<p>注意：如果 name 属性一旦指定，就只会按照名称进行装配。<br>@Autowire和@Qualifier配合使用效果和@Resource一样：<br>@Autowired(required &#x3D; false) @Qualifier(“example”) private Example example; @Resource(name &#x3D; “example”) private Example example;<br>@Resource 装配顺序</p>
<ol>
<li>如果同时指定 name 和 type，则从容器中查找唯一匹配的 bean 装配，找不到则抛出异常；</li>
<li>如果指定 name 属性，则从容器中查找名称匹配的 bean 装配，找不到则抛出异常；</li>
<li>如果指定 type 属性，则从容器中查找类型唯一匹配的 bean 装配，找不到或者找到多个抛出异常；</li>
<li>如果不指定，则自动按照 byName 方式装配，如果没有匹配，则回退一个原始类型进行匹配，如果匹配则自动装配。</li>
</ol>
<h3 id="3-将一个类声明为-Spring-的-bean-的注解有哪些？"><a href="#3-将一个类声明为-Spring-的-bean-的注解有哪些？" class="headerlink" title="3. 将一个类声明为 Spring 的 bean 的注解有哪些？"></a><strong>3. 将一个类声明为 Spring 的 bean 的注解有哪些？</strong></h3><ul>
<li>@Component ：通用的注解，可标注任意类为 Spring 的组件。如果一个 Bean 不知道属于哪个层，可以使用 @Component 注解标注。</li>
<li>@Repository ：对应持久层即 Dao 层，主要用于数据库相关操作。</li>
<li>@Service ：对应服务层，主要设计一些复杂的逻辑，需要用到 Dao 层。</li>
<li>@Controller ：对应 Spring MVC 控制层，主要用来接受用户请求并调用 Service 层返回数据给前端页面。</li>
<li>@Configuration ：声明该类为一个配置类，可以在此类中声明一个或多个 @Bean 方法。</li>
</ul>
<h3 id="4-Configuration-：配置类注解"><a href="#4-Configuration-：配置类注解" class="headerlink" title="4. @Configuration ：配置类注解"></a><strong>4. @Configuration ：配置类注解</strong></h3><p>@Configuration 表明在一个类里可以声明一个或多个 @Bean 方法，并且可以由 Spring 容器处理，以便在运行时为这些 bean 生成 bean 定义和服务请求，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;     <span class="meta">@Bean</span> <span class="keyword">public</span> MyBean <span class="title function_">myBean</span><span class="params">()</span> &#123; <span class="comment">// instantiate, configure and return bean ...     &#125; &#125;</span></span><br></pre></td></tr></table></figure>

<p>我们可以通过 AnnotationConfigApplicationContext 来注册 @Configuration 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(); ctx.register(AppConfig.class); ctx.refresh(); <span class="type">MyBean</span> <span class="variable">myBean</span> <span class="operator">=</span> ctx.getBean(MyBean.class); <span class="comment">// use myBean ...</span></span><br></pre></td></tr></table></figure>

<p>另外也可以通过组件扫描(component scanning)来加载，@Configuration 使用 @Component 进行原注解，因此 @Configuration 类也可以被组件扫描到(特别是使用 XML 的 元素)。@Configuration 类不仅可以使用组件扫描进行引导，还可以使用 @ComponentScan 注解自行配置组件扫描：<br>@Configuration @ComponentScan(“com.acme.app.services”) public class AppConfig { &#x2F;&#x2F; various @Bean definitions … }<br><strong>使用 @Configuration 的约束：</strong></p>
<ul>
<li>配置类必须以类的方式提供(比如不能是由工厂方法返回的实例)。</li>
<li>配置类必须是非 final 的。</li>
<li>配置类必须是非本地的(即可能不在方法中声明)，native 标注的方法。</li>
<li>任何嵌套的配置类必须声明为 static。</li>
<li>@Bean 方法可能不会反过来创建更多的配置类。</li>
</ul>
<p>除了单独使用 @Configuration 注解，我们还可以结合一些外部的 bean 或者注解共同使用，比如 Environment API，@PropertySource，@Value，@Profile 等等许多，这里就不做详细介绍了，更多的用法可以参看 Spring @Configuration 的相关文档 。<br>推荐一个 Spring Boot 基础教程及实战示例：<a href="https://github.com/javastacks/spring-boot-best-practice">https://github.com/javastacks/spring-boot-best-practice</a></p>
<h3 id="5-ControllerAdvice-：处理全局异常利器"><a href="#5-ControllerAdvice-：处理全局异常利器" class="headerlink" title="5. @ControllerAdvice ：处理全局异常利器"></a><strong>5. @ControllerAdvice ：处理全局异常利器</strong></h3><p>在 Spring 3.2 中，新增了 @ControllerAdvice、@RestControllerAdvice、@RestController 注解，可以用于定义 @ExceptionHandler、@InitBinder、@ModelAttribute，并应用到所有 @RequestMapping 、@PostMapping、@GetMapping等这些 Controller 层的注解中。<br>默认情况下，@ControllerAdvice 中的方法应用于全局所有的 Controller。而使用选择器 annotations()，basePackageClasses() 和 basePackages() (或其别名value())来定义更小范围的目标 Controller 子集。<a href="https://mp.weixin.qq.com/s?__biz=MzUyNDc0NjM0Nw==&mid=2247492574&idx=2&sn=f27a39ad8bf4540785d08d7d4be889df&chksm=fa2a08dacd5d81cc3b043fcf01b6b0d9f12e0ed43f02a97c0941c5d325d989c6af5fb0276dc7&scene=21#wechat_redirect">Spring Boot 学习笔记</a>分享给你。<br>如果声明了多个选择器，则应用 OR 逻辑，这意味着所选的控制器应匹配至少一个选择器。请注意，选择器检查是在运行时执行的，因此添加许多选择器可能会对性能产生负面影响并增加复杂性。<br>@ControllerAdvice 我们最常使用的是结合 @ExceptionHandler 用于全局异常的处理。可以结合以下例子，我们可以捕获自定义的异常进行处<a href="https://mp.weixin.qq.com/s?__biz=MzUyNDc0NjM0Nw==&mid=2247492574&idx=2&sn=f27a39ad8bf4540785d08d7d4be889df&chksm=fa2a08dacd5d81cc3b043fcf01b6b0d9f12e0ed43f02a97c0941c5d325d989c6af5fb0276dc7&scene=21#wechat_redirect">理，并且可以自定义状态码返回：</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice(&quot;com.developlee.errorhandle&quot;)</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionHandler</span> &#123;     <span class="comment">/**      * 捕获CustomException      * <span class="doctag">@param</span> e      * <span class="doctag">@return</span> json格式类型      */</span>     </span><br><span class="line"><span class="meta">@ResponseBody</span>     </span><br><span class="line"><span class="meta">@ExceptionHandler(&#123;CustomException.class&#125;)</span> <span class="comment">//指定拦截异常的类型 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span> <span class="comment">//自定义浏览器返回状态码     </span></span><br><span class="line"><span class="keyword">public</span> Map&gt;String, Object&lt; customExceptionHandler(CustomException e) &#123;     </span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span> &lt;&gt;(); </span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, e.getCode()); </span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, e.getMsg()); <span class="keyword">return</span> map;</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>更多信息可以参看 Spring @ControllerAdvice 的官方文档。推荐一个 Spring Boot 基础教程及实战示例：<a href="https://link.zhihu.com/?target=https://github.com/javastacks/spring-boot-best-practice">https://github.com/javastacks/spring-boot-best-practice</a></p>
<h3 id="6-Component-Repository-Service-的区别"><a href="#6-Component-Repository-Service-的区别" class="headerlink" title="6. @Component, @Repository, @Service 的区别"></a><strong>6. @Component, @Repository, @Service 的区别</strong></h3><p><img src="/./img/image.png" alt="image.png"><br>@Component是一个通用的Spring容器管理的单例bean组件。而@Repository, @Service, @Controller就是针对不同的使用场景所采取的特定功能化的注解组件。<br>因此，当你的一个类被@Component所注解，那么就意味着同样可以用@Repository, @Service, @Controller 来替代它，同时这些注解会具备有更多的功能，而且功能各异。<br>最后，如果你不知道要在项目的业务层采用@Service还是@Component注解。那么，@Service是一个更好的选择。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/common-annotation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="常用注解解析"><a href="#常用注解解析" class="headerlink" title="常用注解解析"></a>常用注解解析</h1><h2 id="1-有这么一个故事，从xml配置文件的bean说起"><a href="#1-有这么一个故事，从xml配置文件的bean说起" class="headerlink" title="1. 有这么一个故事，从xml配置文件的bean说起"></a>1. 有这么一个故事，从xml配置文件的bean说起</h2><p>Spring用xml配置文件的时候（不知道阅读这篇文章的你用没用过，我用过一段时间，那是黑暗伤痛的回忆QQQ），一个xml配置文件里面有很多个bean。类似这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;helloWorld&quot; class=&quot;com.test.spring.beans.HelloWorld&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;Spring&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>每个bean都对应着一个class，可能是controller，可能是service，可能是dao，xml配置文件就是告诉Spring，我这里有哪些bean，他们都叫啥名字（例如helloworld），他们的class文件在哪（com.test.spring.beans.HelloWorld），他们都有哪些属性。这样，当项目启动时，Spring就回去管理这些类了。</p>
<h2 id="2-进入-Configuration时代"><a href="#2-进入-Configuration时代" class="headerlink" title="2. 进入@Configuration时代"></a>2. 进入@Configuration时代</h2><p>你现在使用<code>@Service</code>、<code>@Repository</code>、<code>@Component</code>这些注解放在java的类上用来告诉Spring：“我标注的这些类请你来管理”。在以前就是要在xml配置文件里写上面这样的bean，有一个类写一个bean（实在是太麻烦了。。。。。，不方便码代码，不方便阅读，不方便修改），一个xml配置文件写好多bean。<br><strong>总结一下：</strong></p>
<ul>
<li><code>@Configuration</code>注解就相当于xml配置文件，告诉Spring我这里有好多bean要交给你管理</li>
<li><code>@Bean</code>注解就相当于xml配置文件里面的bean，告诉Spring这个被注解的类就交给你管理了<br>到这里，Spring发展史中注解替换xml配置文件的故事就讲完了，是不是很简单！</li>
</ul>
<p>&#x3D;十万个为什么的分割线&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>那，既然问题都解决了，有@Component啥事？？？<br>年轻人，sometimes naive</p>
<h2 id="3-Component粉墨登场"><a href="#3-Component粉墨登场" class="headerlink" title="3. @Component粉墨登场"></a>3. @Component粉墨登场</h2><p>无名子曰过，偷懒是人类创造力的源泉。我都把class类写好了，还要再写个<code>@Configuration</code>注解的class去告诉Spring（除了通知Spring，这个class不产生其他价值），虽然这个class相比于xml配置文件写起来方便又好阅读，但是，这个时候总有但是，我为啥不直接就告诉Spring呢？？？<br>  <code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>都是<code>@Component</code>的更具体一点的实现（这里如果说错了，求大佬轻喷）。写完class加上这些注解，其实就是加上<code>@Component</code>注解，Spring就懂了，奥奥，你小子太懒了，这么多类全部是让我来管理的，不过话说回来谁让我是你baba呢！<br>  是不是这就完事了呢，是的，没有但是，真的就完事了。</p>
<h2 id="4-“但是”又回来了"><a href="#4-“但是”又回来了" class="headerlink" title="4. “但是”又回来了"></a>4. “但是”又回来了</h2><p>是的，这里又有但是了。可能有人想到了，既然<code>@Component</code>跟Spring已经把问题解决了，那，<code>@Bean</code>这个注解为啥还没退休啊，还在这站着地儿，咋不见新版Spring给加个<code>@Deprecated</code>？？？<br>  年轻人，有想法！！！<br>  假设这么一种情况，有几个class，我自己也不是不能写，但是写了周末就没时间去外滩闲逛了，就在这个时候，我发现alimama的老铁们已经写好了同样功能的class，我在maven里import一下就完了，开心三秒，又有问题了，他们写的时候没用Spring：</p>
<ul>
<li>1）打好的jar包，我不能在class上面加<code>@Component</code>注解；</li>
<li>2）我没有他们的源码，也不能把他们的代码复制过来，假装自己重写了一遍QQQ</li>
</ul>
<p>这时候<code>@Bean</code>的作用就体现出来了，请看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class MyClass &#123;</span><br><span class="line">  // class1和class2就是jar包里写好的</span><br><span class="line">  @Bean</span><br><span class="line">  public Class1 getClass1() &#123;</span><br><span class="line">    return new Class1();</span><br><span class="line">  &#125;</span><br><span class="line">  @Bean</span><br><span class="line">  public Class2 getClass1() &#123;</span><br><span class="line">    return new Class2();</span><br><span class="line">  &#125;</span><br><span class="line">  .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然又回到了<code>@Component出场</code>之前的<code>@Configuration</code>时代。但是你也不需要经常使用这个对吧</p>
<h2 id="4-让我们以一点小干货结束今天的故事"><a href="#4-让我们以一点小干货结束今天的故事" class="headerlink" title="4. 让我们以一点小干货结束今天的故事"></a>4. 让我们以一点小干货结束今天的故事</h2><p>Spring管理的Bean我们需要通过<code>@Autowired</code>或者<code>@Resource</code>导入来使用，这两的区别啥的你可以自己去搜索一下，这里只说一个问题。<code>@Autowired</code>是按照类型装配的，<code>@Resource</code>是按照名称装配的，加入同一类型有多个bean，只是名字不一样，<code>@Autowired</code>直接导入会报错。这时候课题通过<code>@Resource(name=&quot;name&quot;)</code>或者<code>@Autowired@Qualifier(&quot;name&quot;)</code>来按名称装配，解决问题。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/java-jwt/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="java-jwt使用"><a href="#java-jwt使用" class="headerlink" title="java-jwt使用"></a>java-jwt使用</h1><p>单点登录<br><a href="https://github.com/longguikeji/arkid">https://github.com/longguikeji/arkid</a><br>​</p>
<p>JwtUtil.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.security.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JwtToken生成的工具类</span></span><br><span class="line"><span class="comment"> * JWT token的格式：header.payload.signature</span></span><br><span class="line"><span class="comment"> * header的格式（算法、token的类型）：</span></span><br><span class="line"><span class="comment"> * &#123;&quot;alg&quot;: &quot;HS512&quot;,&quot;typ&quot;: &quot;JWT&quot;&#125;</span></span><br><span class="line"><span class="comment"> * payload的格式（用户名、创建时间、生成时间）：</span></span><br><span class="line"><span class="comment"> * &#123;&quot;sub&quot;:&quot;wang&quot;,&quot;created&quot;:1489079981393,&quot;exp&quot;:1489684781&#125;</span></span><br><span class="line"><span class="comment"> * signature的生成算法：</span></span><br><span class="line"><span class="comment"> * HMACSHA512(base64UrlEncode(header) + &quot;.&quot; +base64UrlEncode(payload),secret)</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(JwtTokenUtil.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_KEY_USERNAME</span> <span class="operator">=</span> <span class="string">&quot;sub&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_KEY_CREATED</span> <span class="operator">=</span> <span class="string">&quot;created&quot;</span>;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long expiration;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHead&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据负责生成JWT的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">generateToken</span><span class="params">(Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC512(secret);</span><br><span class="line">        System.out.println(<span class="string">&quot;生成的过期时间&quot;</span>);</span><br><span class="line">        System.out.println(generateExpirationDate());</span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                .withClaim(CLAIM_KEY_USERNAME, String.valueOf(claims.get(CLAIM_KEY_USERNAME)))</span><br><span class="line">                .withClaim(CLAIM_KEY_CREATED, String.valueOf(claims.get(CLAIM_KEY_CREATED)))</span><br><span class="line">                .withExpiresAt(generateExpirationDate())</span><br><span class="line">                .sign(algorithm);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取JWT中的负载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Claim&gt; <span class="title function_">getClaimsFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        Map&lt;String, Claim&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC512(secret);</span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm)</span><br><span class="line"></span><br><span class="line">                .build(); <span class="comment">//Reusable verifier instance</span></span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> verifier.verify(token);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = jwt.getClaims();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;JWT格式验证失败:&#123;&#125;&quot;</span>, token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token的过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Timestamp <span class="title function_">generateExpirationDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis() + expiration * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取登录用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserNameFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        String username;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Map&lt;String, Claim&gt; claims = getClaimsFromToken(token);</span><br><span class="line">            System.out.println(claims);</span><br><span class="line">            username = claims.get(CLAIM_KEY_USERNAME).asString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            username = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token是否还有效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token       客户端传入的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDetails 从数据库中查询出来的用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateToken</span><span class="params">(String token, UserDetails userDetails)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUserNameFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> username.equals(userDetails.getUsername()) &amp;&amp; !isTokenExpired(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否已经失效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expiredDate</span> <span class="operator">=</span> getExpiredDateFromToken(token);</span><br><span class="line">        System.out.println(<span class="string">&quot;过期了吗&quot;</span>);</span><br><span class="line">        System.out.println(expiredDate);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">return</span> expiredDate.before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date <span class="title function_">getExpiredDateFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC512(secret);</span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm)</span><br><span class="line"></span><br><span class="line">                .build(); <span class="comment">//Reusable verifier instance</span></span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> verifier.verify(token);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jwt.getExpiresAt() ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户信息生成token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(UserDetails userDetails)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        claims.put(CLAIM_KEY_USERNAME, userDetails.getUsername());</span><br><span class="line">        claims.put(CLAIM_KEY_CREATED, System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> generateToken(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当原来的token没过期时是可以刷新的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldToken 带tokenHead的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">refreshHeadToken</span><span class="params">(String oldToken)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isEmpty(oldToken)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> oldToken.substring(tokenHead.length());</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isEmpty(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//token校验不通过</span></span><br><span class="line">        Map&lt;String, Claim&gt; claims = getClaimsFromToken(token);</span><br><span class="line">        <span class="keyword">if</span> (claims == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果token已经过期，不支持刷新</span></span><br><span class="line">        <span class="keyword">if</span> (isTokenExpired(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; claim = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//如果token在30分钟之内刚刷新过，返回原token</span></span><br><span class="line">        <span class="keyword">if</span> (tokenRefreshJustBefore(token, <span class="number">30</span> * <span class="number">60</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> token;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            claim.put(CLAIM_KEY_USERNAME, claims.get(CLAIM_KEY_USERNAME).asString());</span><br><span class="line">            claim.put(CLAIM_KEY_CREATED, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="keyword">return</span> generateToken(claim);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token在指定时间内是否刚刚刷新过</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 原token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  指定时间（秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tokenRefreshJustBefore</span><span class="params">(String token, <span class="type">int</span> time)</span> &#123;</span><br><span class="line">        Map&lt;String, Claim&gt; claims = getClaimsFromToken(token);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">created</span> <span class="operator">=</span> claims.get(CLAIM_KEY_CREATED).asDate();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">refreshDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">//刷新时间在创建时间的指定时间内</span></span><br><span class="line">        <span class="keyword">if</span> (refreshDate.after(created) &amp;&amp; refreshDate.before(DateUtil.offsetSecond(created, time))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>UserController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.first.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.example.first.model.User;</span><br><span class="line"><span class="keyword">import</span> com.example.first.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.example.first.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yangzhengqian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>:Created time 2021/8/11 15:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> HashMap <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">sqlUser</span> <span class="operator">=</span> userService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="string">&quot;username&quot;</span>, username));</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(password, sqlUser.getPassword())) &#123;</span><br><span class="line">            token = JwtUtil.sign(username, password);</span><br><span class="line">            System.out.println(token);</span><br><span class="line">            h.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">            <span class="keyword">return</span> h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/reg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reg</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u.setUsername(username);</span><br><span class="line">        u.setPassword(password);</span><br><span class="line">        userService.save(u);</span><br><span class="line">        <span class="keyword">return</span> u.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ver&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> HashMap  <span class="title function_">ver</span><span class="params">(<span class="meta">@RequestParam(&quot;token&quot;)</span> String token)</span>&#123;</span><br><span class="line">        <span class="comment">//String username=JwtUtil.getUsername(token);</span></span><br><span class="line">        Map  user=JwtUtil.getTokenInfo(token);</span><br><span class="line">        HashMap&lt;String,String&gt; res=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        res.put(<span class="string">&quot;user&quot;</span>, String.valueOf(user));</span><br><span class="line">        <span class="keyword">return</span>  res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span> (<span class="string">&quot;/uploadImg&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> HashMap  <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;image&quot;)</span> MultipartFile image)</span> &#123;</span><br><span class="line">        String imgurl=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        HashMap&lt;String, Object&gt; res=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//存入数据库的文件地址集合</span></span><br><span class="line">        List&lt;String&gt; pathList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//文件上传</span></span><br><span class="line">        <span class="keyword">if</span> (!image.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">                <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> cal.get(Calendar.YEAR);</span><br><span class="line">                <span class="comment">//本地测试上传图片文件夹名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span>image.getOriginalFilename();</span><br><span class="line">                <span class="comment">// 文件名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">                <span class="comment">// 新文件名（唯一）</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\yzqde\\tmp\\&quot;</span>+System.currentTimeMillis() + suffix;</span><br><span class="line"></span><br><span class="line">                <span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(newFileName);</span><br><span class="line">                <span class="keyword">if</span> (!newFile.exists()) &#123;</span><br><span class="line">                    newFile.createNewFile();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">BufferedOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(newFile));</span><br><span class="line">                out.write(image.getBytes());</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">                <span class="comment">//此处将imgurl路径进行变更</span></span><br><span class="line"></span><br><span class="line">                pathList.add(newFileName);</span><br><span class="line">                res.put(<span class="string">&quot;path&quot;</span>,pathList);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                 e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/init-functions/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="初始化执行操作"><a href="#初始化执行操作" class="headerlink" title="初始化执行操作"></a>初始化执行操作</h1><p>通常的我们的项目开发中，经常会遇到那种在服务一启动就需要自动执行一些业务代码的情况。比如将数据库中的配置信息或者数据字典之类的缓存到redis，或者在服务启动的时候将一些配置化的定时任务开起来。关于spring mvc或者springboot如何在项目启动的时候就执行一些代码</p>
<h2 id="PostConstruct注解"><a href="#PostConstruct注解" class="headerlink" title="@PostConstruct注解"></a><code>@PostConstruct</code>注解</h2><p>从Java EE5规范开始，Servlet中增加了两个影响Servlet生命周期的注解，@PostConstruct和@PreDestroy，这两个注解被用来修饰一个非静态的void（）方法。@PostConstruct会在所在类的构造函数执行之后执行，在init()方法执行之前执行。(@PreDestroy注解的方法会在这个类的destory()方法执行之后执行。)<br>@PostConstruct<br>不是spring提供的而是Java自己的注解。</p>
<p>Java中该注解的说明：@PostConstruct该注解被用来修饰一个非静态的void（）方法。被@PostConstruct修饰的方法会在服务器加载Servlet的时候运行，并且只会被服务器执行一次。PostConstruct注释用于需要依赖注入完成后才能执行任何初始化的方法上。 在类投入使用之前，必须调用此方法</p>
<p>在使用spring框架时，在一个类内，如果有构造器（Constructor ），有@PostConstruct，还有@Autowired，他们的先后执行顺序为Constructor &gt;&gt; @Autowired &gt;&gt; @PostConstruct。在类加载的时候，为当前类初始化一些数据，那么可以使用@PostConstruct注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 注意 这里必须有</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartAllJobInit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass().getName());</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JobTaskUtil jobTaskUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span> <span class="comment">// 构造函数之后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;容器启动后执行&quot;</span>);</span><br><span class="line">        startJob();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startJob</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;JobInfoBO&gt; list = jobInfoService.findList();</span><br><span class="line">        <span class="keyword">for</span> (JobInfoBO jobinfo :list) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;0&quot;</span>.equals(jobinfo.getStartWithrun()))&#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;任务&#123;&#125;未设置自动启动。&quot;</span>, jobinfo.getJobName());</span><br><span class="line">                    jobInfoService.updateJobStatus(jobinfo.getId(), BasicsConstantManual.BASICS_SYS_JOB_STATUS_STOP);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;任务&#123;&#125;设置了自动启动。&quot;</span>, jobinfo.getJobName());</span><br><span class="line">                    jobTaskUtil.addOrUpdateJob(jobinfo);</span><br><span class="line">                    jobInfoService.updateJobStatus(jobinfo.getId(), BasicsConstantManual.BASICS_SYS_JOB_STATUS_STARTING);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;执行定时任务出错，任务名称 &#123;&#125; &quot;</span>, jobinfo.getJobName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现CommandLineRunner接口并重写run-方法"><a href="#实现CommandLineRunner接口并重写run-方法" class="headerlink" title="实现CommandLineRunner接口并重写run()方法"></a>实现CommandLineRunner接口并重写run()方法</h2><p>其实有两个接口ApplicationRunner,CommandLineRunner</p>
<p>这两个接口中有一个run方法，只需要实现这个方法即可。这两个接口的不同之处在于：ApplicationRunner中run方法的参数为ApplicationArguments，而CommandLineRunner接口中run方法的参数为String数组。<br>:::tip<br>注意：一定要有@Component这个注解。要不然SpringBoot扫描不到这个类,* 是不会执行。</p>
<p>@Order注解<br>如果有多个实现类，而需要他们按一定顺序执行的话，可以在实现类上加上@Order注解。@Order(value&#x3D;整数值)。SpringBoot会按照@Order中的value值从小到大依次执行。<br>:::<br>例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 注意 这里必须有</span></span><br><span class="line"><span class="comment">//@Order(2) 如果有多个类需要启动后执行 order注解中的值为启动的顺序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartAllJobInit</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass().getName());</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JobTaskUtil jobTaskUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        List&lt;JobInfoBO&gt; list = jobInfoService.findList();</span><br><span class="line">        <span class="keyword">for</span> (JobInfoBO jobinfo :list) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;0&quot;</span>.equals(jobinfo.getStartWithrun()))&#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;任务&#123;&#125;未设置自动启动。&quot;</span>, jobinfo.getJobName());</span><br><span class="line">                    jobInfoService.updateJobStatus(jobinfo.getId(), BasicsConstantManual.BASICS_SYS_JOB_STATUS_STOP);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;任务&#123;&#125;设置了自动启动。&quot;</span>, jobinfo.getJobName());</span><br><span class="line">                    jobTaskUtil.addOrUpdateJob(jobinfo);</span><br><span class="line">                    jobInfoService.updateJobStatus(jobinfo.getId(), BasicsConstantManual.BASICS_SYS_JOB_STATUS_STARTING);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;执行定时任务出错，任务名称 &#123;&#125; &quot;</span>, jobinfo.getJobName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用监听器"><a href="#使用监听器" class="headerlink" title="使用监听器"></a>使用监听器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化常量的监听器</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 当spring装配好配置后，就去数据库读constants</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;等待解决&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.7.0/reference/htmlsingle/#features.spring-application.application-events-and-listeners&quot;&gt;链接&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yanni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantsInitListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationContextInitializedEvent&gt;, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> Log.get();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">initSql</span> <span class="operator">=</span> <span class="string">&quot;select config_value from tb_blog_config where config_field = &#x27;init&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.HIGHEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationContextInitializedEvent applicationContextInitializedEvent)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> applicationContextInitializedEvent.getApplicationContext().getEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据库连接配置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dataSourceUrl</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;spring.datasource.url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dataSourceUsername</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;spring.datasource.username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dataSourcePassword</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;spring.datasource.password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有为空的配置，终止执行</span></span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.hasEmpty(dataSourceUrl, dataSourceUsername, dataSourcePassword)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;database not cononnected&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;org.postgresql.Driver&quot;</span>);</span><br><span class="line">            <span class="keyword">assert</span> dataSourceUrl != <span class="literal">null</span>;</span><br><span class="line">            conn = DriverManager.getConnection(dataSourceUrl, dataSourceUsername, dataSourcePassword);</span><br><span class="line">            <span class="type">Entity</span> <span class="variable">init</span> <span class="operator">=</span> SqlExecutor.query(conn, initSql, <span class="keyword">new</span> <span class="title class_">EntityHandler</span>());</span><br><span class="line">            <span class="keyword">if</span> (init == <span class="literal">null</span>) &#123;</span><br><span class="line">                SqlExecutor.execute(conn,SqlConstant.initAdminSql );</span><br><span class="line">                 SqlExecutor.execute(conn, SqlConstant.insertConfigDataSql,<span class="keyword">new</span> <span class="title class_">Object</span>() );</span><br><span class="line">              SqlExecutor.execute(conn,SqlConstant.initTagSql );</span><br><span class="line">                 SqlExecutor.execute(conn,SqlConstant.initCateSql );</span><br><span class="line">                 SqlExecutor.execute(conn,SqlConstant.initLinkSql );</span><br><span class="line">               log.info(<span class="string">&quot;执行sql成功!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;数据已经存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取sys_config表的数据</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;&gt;&gt;&gt; 读取数据库constants配置信息出错：&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtil.close(conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在<code>resources/META-INF/spring.factories</code>写下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">com.site.blog.config.listener.ConstantsInitListener</span><br></pre></td></tr></table></figure>

<p>就可以在启动前写入sql</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/listener/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/other-frameworks/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="其他api框架"><a href="#其他api框架" class="headerlink" title="其他api框架"></a>其他api框架</h1><blockquote>
<p>vert.x</p>
</blockquote>
<p><a href="https://github.com/eclipse-vertx/vert.x">https://github.com/eclipse-vertx/vert.x</a><br>​</p>
<blockquote>
<p>jfinal</p>
</blockquote>
<p> <a href="https://jfinal.com/">https://jfinal.com/</a><br><a href="https://gitee.com/jfinal/jfinal">https://gitee.com/jfinal/jfinal</a></p>
<blockquote>
<p>jboot</p>
</blockquote>
<p>jboot: <a href="http://www.jboot.io/">http://www.jboot.io/</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/spring-boot-starter-quartz/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="quartz教程"><a href="#quartz教程" class="headerlink" title="quartz教程"></a>quartz教程</h1><p><a href="https://www.cnblogs.com/summerday152/p/14193968.html">https://www.cnblogs.com/summerday152/p/14193968.html</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/spring-controller/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="springboot使用controller传递参数"><a href="#springboot使用controller传递参数" class="headerlink" title="springboot使用controller传递参数"></a>springboot使用controller传递参数</h1><p>:::tip</p>
<p>see <a href="https://github.com/yzqdev/spring-tutor/tree/dev/spring-transfer">https://github.com/yzqdev/spring-tutor/tree/dev/spring-transfer</a><br>额外内容 <a href="https://spring.io/blog/2020/06/30/url-matching-with-pathpattern-in-spring-mvc">AntPathMatcher和PathPattern的区别</a><br>详细文档见<a href="https://docs.spring.io/spring-framework/docs/5.3.17/reference/html/web.html#mvc-ann-requestmapping-uri-templates">spring.io</a><br>:::</p>
<h2 id="基本传参方式"><a href="#基本传参方式" class="headerlink" title="基本传参方式"></a>基本传参方式</h2><p>直接上代码</p>
<p>:::tip<br><strong>注意</strong><br>multipart&#x2F;form-data与x-www-form-urlencoded的区别:<br> multipart&#x2F;form-data：可以上传文件或者键值对，最后都会转化为一条消息<br> x-www-form-urlencoded：只能上传键值对，而且键值对都是通过&amp;间隔分开的。<br> application&#x2F;json: 上传的是json键值对<br> :::</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户</span></span><br><span class="line"><span class="comment">     * api使用: http://localhost:9400/user/getUser</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> User&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用pathvariable</span></span><br><span class="line"><span class="comment">     * api使用: http://localhost:9400/userByPath/abcdde</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;userByPath/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserByPath</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * api使用: http://localhost:9400/user/addUserstr?username=aa&amp;password=bb</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> User&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * api使用: http://localhost:9400/user/addUserbody</span></span><br><span class="line"><span class="comment">     *&lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;code&gt;</span></span><br><span class="line"><span class="comment">     * &#123;</span></span><br><span class="line"><span class="comment">     *             &quot;username&quot;: &quot;aa&quot;,</span></span><br><span class="line"><span class="comment">     *             &quot;password&quot;: &quot;bb&quot;</span></span><br><span class="line"><span class="comment">     *         &#125;</span></span><br><span class="line"><span class="comment">     *     &lt;/code&gt;</span></span><br><span class="line"><span class="comment">     *&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> User&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUserBody&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">addUserBody</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     *api使用: http://localhost:9400/user/addUserstr?username=aa&amp;password=bb</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> User&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUserstr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">addUserString</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder().username(username).password(password).build();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除多个用户</span></span><br><span class="line"><span class="comment">     * api使用: http://localhost:9400/user/deleteUsers</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;code&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;</span></span><br><span class="line"><span class="comment">     *   &quot;userIds&quot;: [</span></span><br><span class="line"><span class="comment">     *     &quot;string&quot;</span></span><br><span class="line"><span class="comment">     *   ]</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     *     &lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDelDto 用户del dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> HashMap&#125;&lt;&#123;<span class="doctag">@link</span> String&#125;, &#123;<span class="doctag">@link</span> Object&#125;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteUsers&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title function_">deleteUsers</span><span class="params">(<span class="meta">@RequestBody</span> UserDelDto userDelDto)</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">&quot;obj&quot;</span>, userDelDto);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除users1</span></span><br><span class="line"><span class="comment">     * api使用: http://localhost:9400/user/deleteUsers1</span></span><br><span class="line"><span class="comment">     *[</span></span><br><span class="line"><span class="comment">     *   &quot;string&quot;</span></span><br><span class="line"><span class="comment">     * ]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> HashMap&#125;&lt;&#123;<span class="doctag">@link</span> String&#125;, &#123;<span class="doctag">@link</span> Object&#125;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteUsers1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title function_">deleteUsers1</span><span class="params">(<span class="meta">@RequestBody</span> String[] ids)</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">&quot;obj&quot;</span>, ids);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求头信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> HashMap&#125;&lt;&#123;<span class="doctag">@link</span> String&#125;, &#123;<span class="doctag">@link</span> Object&#125;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> RequestHelper.getRequestHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> RequestHelper.getRequestHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        res.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">        res.put(<span class="string">&quot;auth&quot;</span>, auth);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检索</span></span><br><span class="line"><span class="comment">     *api使用: http://localhost:9400/user/retrieve?username=aa</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> User&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/retrieve&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">retrieve</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().eq(User::getUsername, username));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="map传参方式-不推荐"><a href="#map传参方式-不推荐" class="headerlink" title="map传参方式(不推荐)"></a>map传参方式(不推荐)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * 用map接收</span></span><br><span class="line"><span class="comment">     * api使用: http://localhost:9400/my/save</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;code&gt;</span></span><br><span class="line"><span class="comment">     *         &#123;</span></span><br><span class="line"><span class="comment">     *   &quot;additionalProp1&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="comment">     *   &quot;additionalProp2&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="comment">     *   &quot;additionalProp3&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     *     &lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 地图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Map&#125;&lt;&#123;<span class="doctag">@link</span> String&#125;, &#123;<span class="doctag">@link</span> String&#125;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; map)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/spring-cors/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="spring跨域处理"><a href="#spring跨域处理" class="headerlink" title="spring跨域处理"></a>spring跨域处理</h1><p>:::warning<br>注意:使用springsecurity时会出现跨域问题!在websecurityconfig上面加上.cors()方法!!!!!!<br>:::<br>​</p>
<p><a href="https://blog.csdn.net/weixin_45059597/article/details/107490252">https://blog.csdn.net/weixin_45059597&#x2F;article&#x2F;details&#x2F;107490252</a></p>
<h2 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h2><p>过滤器其实不是spring管理的,而是servelet管理的,常用的<code>GenericFilterBean</code>,<code>OncePerRequestFilter</code>,spring管理的Interceptor</p>
<h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.site.blog.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CorsConfiguration <span class="title function_">buildConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        corsConfiguration.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span> );</span><br><span class="line">        <span class="comment">//corsConfiguration.addAllowedOrigin(&quot;http://192.168.72.132&quot;);</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="comment">// 配置所有请求</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, buildConfig());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(value = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsFilter</span> <span class="keyword">extends</span> <span class="title class_">GenericFilterBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, httpServletRequest.getHeader(HttpHeaders.ORIGIN));</span><br><span class="line">        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);</span><br><span class="line">        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, <span class="string">&quot;GET, POST, PUT, DELETE, OPTIONS&quot;</span>);</span><br><span class="line">        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_MAX_AGE, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!CorsUtils.isPreFlightRequest(httpServletRequest)) &#123;</span><br><span class="line">            chain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者(自己手动写请求头,推荐上面那种)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;CorsFilter &quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, PATCH, DELETE, PUT&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="也可以使用拦截器-代码如下"><a href="#也可以使用拦截器-代码如下" class="headerlink" title="也可以使用拦截器:代码如下"></a>也可以使用拦截器:代码如下</h2><p>:::warning<br>这里不能使用allowedOriginsPattern(“*”)配置多个<br>但是可以使用<code>response.setHeader(&quot;Access-Control-Allow-Origin&quot;, request.getHeader(&quot;origin&quot;) );</code>设置动态请求头实现跨域<br>:::</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Yangzhengqian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:Created time 2020/8/7 17:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorCORS</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);</span><br><span class="line">                 <span class="comment">//浏览器会先发送一个试探请求OPTIONS,然后才会发送真正的请求，为了避免拦截器拦截两次请求，所以不能让OPTIONS请求通过</span></span><br><span class="line">         <span class="keyword">if</span> (request.getMethod().equals(HttpMethod.OPTIONS.name()))&#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后添加webmvcconfig:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConf</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span>File.separator + <span class="string">&quot;HellohaoData&quot;</span> + File.separator;</span><br><span class="line">        <span class="comment">//和页面有关的静态目录都放在项目的static目录下</span></span><br><span class="line">       <span class="comment">//registry.addResourceHandler(&quot;/static/**&quot;).addResourceLocations(&quot;classpath:/static/&quot;);</span></span><br><span class="line">        <span class="comment">//上传的图片在D盘下的OTA目录下，访问路径如：http://localhost:8081/OTA/d3cf0281-bb7f-40e0-ab77-406db95ccf2c.jpg</span></span><br><span class="line">        <span class="comment">//其中OTA表示访问的前缀。&quot;file:D:/OTA/&quot;是文件真实的存储路径</span></span><br><span class="line">        <span class="comment">//registry.addResourceHandler(&quot;/test/**&quot;).addResourceLocations(&quot;file:C:/test/&quot;);</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">//registry.addResourceHandler(&quot;/static/**&quot;)</span></span><br><span class="line">        <span class="comment">//        .addResourceLocations(&quot;classpath:/static/&quot;);</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/links/**&quot;</span>).addResourceLocations(<span class="string">&quot;file:&quot;</span>+filePath);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> InterceptorCORS interceptorCORS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//添加跨域</span></span><br><span class="line">        registry.addInterceptor(interceptorCORS).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="官网使用addCorsMapping-但是限制太多-不推荐用"><a href="#官网使用addCorsMapping-但是限制太多-不推荐用" class="headerlink" title="官网使用addCorsMapping,但是限制太多,不推荐用"></a>官网使用addCorsMapping,但是限制太多,不推荐用</h2><p>:::warning<br>注意:addCorsMapping 会被interceptor覆盖,后续如果添加自定义的拦截器（包括Spring security），addCorsMappings方法实现的统一跨域配置就会失效，其原因在于请求经过的先后顺序：</p>
<blockquote>
<p>当请求到来时会先进入拦截器中，而不是进入Mapping映射中，所以返回的头信息中并没有配置的跨域信息。浏览器就会报跨域异常<br>:::<br><a href="https://docs.spring.io/spring-framework/docs/5.3.9/reference/html/web.html#mvc-cors-global">链接</a>​<br>这里可以使用allowedOriginsPattern(“*”)配置多个</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>  &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">                registry.addMapping(<span class="string">&quot;/api/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>) <span class="comment">// 所有的外部域都可跨域访问。 如果是localhost则很难配置，因为在跨域请求的时候，外部域的解析可能是localhost、127.0.0.1、主机名</span></span><br><span class="line">                        .allowCredentials(<span class="literal">true</span>) <span class="comment">// 是否支持跨域用户凭证</span></span><br><span class="line">                        .allowedMethods(<span class="string">&quot;*&quot;</span>) <span class="comment">// 当前站点支持的跨域请求类型是什么</span></span><br><span class="line">                        .maxAge(<span class="number">3600</span>); <span class="comment">// 超时时长设置为1小时。 时间单位是秒。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/spring-log/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="Java日志框架"><a href="#Java日志框架" class="headerlink" title="Java日志框架"></a>Java日志框架</h1><h2 id="1-SLF4J-Simple-logging-Facade-for-Java"><a href="#1-SLF4J-Simple-logging-Facade-for-Java" class="headerlink" title="1.SLF4J(Simple logging Facade for Java)"></a>1.SLF4J(Simple logging Facade for Java)</h2><p>意思为简单日志门面，它是把不同的日志系统的实现进行了具体的抽象化，只提供了统一的日志使用接口，使用时只需要按照其提供的接口方法进行调用即可，由于它只是一个接口，并不是一个具体的可以直接单独使用的日志框架，所以最终日志的格式、记录级别、输出方式等都要通过接口绑定的具体的日志系统来实现，这些具体的日志系统就有log4j,logback,java.util.logging等，它们才实现了具体的日志系统的功能。</p>
<h3 id="如何使用SLF4J"><a href="#如何使用SLF4J" class="headerlink" title="如何使用SLF4J?"></a>如何使用SLF4J?</h3><p>既然SLF4J只是一个接口，那么实际使用时必须要结合具体的日志系统来使用，我们首先来看SLF4J和各个具体的日志系统进行绑定时的框架原理图：</p>
<p><img src="https://img2018.cnblogs.com/blog/1434095/201810/1434095-20181011231449434-658115391.png" alt="img"></p>
<p>其实slf4j原理很简单，他只提供一个核心slf4j api(就是slf4j-api.jar包)，这个包只有日志的接口，并没有实现，所以如果要使用就得再给它提供一个实现了些接口的日志包，比 如：log4j,common logging,jdk log日志实现包等，但是这些日志实现又不能通过接口直接调用，实现上他们根本就和slf4j-api不一致，因此slf4j又增加了一层来转换各日志实现包的使 用，当然slf4j-simple除外。其结构如下：<br>slf4j-api(接口层)<br>  |<br>各日志实现包的连接层( slf4j-jdk14, slf4j-log4j)<br>  |<br>各日志实现包</p>
<h3 id="所以，结合各日志实现包使用时提供的jar包情况为"><a href="#所以，结合各日志实现包使用时提供的jar包情况为" class="headerlink" title="所以，结合各日志实现包使用时提供的jar包情况为"></a>所以，结合各日志实现包使用时提供的jar包情况为</h3><p>SLF4J和logback结合使用时需要提供的jar:slf4j-api.jar,logback-classic.jar,logback-core.jar</p>
<p>SLF4J和log4j结合使用时需要提供的jar:slf4j-api.jar,slf4j-log412.jar,log4j.jar</p>
<p>SLF4J和JDK中java.util.logging结合使用时需要提供的jar:slf4j-api.jar,slf4j-jdk14.jar</p>
<p>SLF4J和simple(SLF4J本身提供的一个接口的简单实现)结合使用时需要提供的jar:slf4j-api.jar,slf4j-simple.jar</p>
<p>当然还有其他的日志实现包，以上是经常会使用到的一些。<br>:::warning<br> 注意，以上slf4j和各日志实现包结合使用时最好只使用一种结合，不然的话会提示重复绑定日志，并且会导致日志无法输出。<br>:::</p>
<p>***slf4j-api.jar:对外提供统一的日志调用接口，该接口具体提供的调用方式和方法举例说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Tester.class); <span class="comment">//通过LoggerFactory获取Logger实例</span></span><br><span class="line"></span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">//接口里的统一的调用方法，各具体的日志系统都有实现这些方法</span></span><br><span class="line">　　logger.info(<span class="string">&quot;testlog: &#123;&#125;&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    logger.debug(<span class="string">&quot;testlog: &#123;&#125;&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    logger.error(<span class="string">&quot;testlog: &#123;&#125;&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    logger.trace(<span class="string">&quot;testlog: &#123;&#125;&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    logger.warn(<span class="string">&quot;testlog: &#123;&#125;&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>如果系统中之前已经使用了log4j做日志输出，想使用slf4j作为统一的日志输出，该怎么办呢？</strong></p>
<p>如果之前系统中是单独使用log4j做为日志输出的，这时再想使用slf4j做为日志输出时，如果系统中日志比较多，此时更改日志输出方法肯定是不太现实的，这个时候就可以使用log4j-over-slf4j.jar将使用log4j日志框架输出的日志路由到slf4j上来统一采用slf4j来输出日志。</p>
<p><strong>为什么要使用SLF4J?</strong></p>
<ul>
<li>slf4j是一个日志接口，自己没有具体实现日志系统，只提供了一组标准的调用api,这样将调用和具体的日志实现分离，使用slf4j后有利于根据自己实际的需求更换具体的日志系统，比如，之前使用的具体的日志系统为log4j,想更换为logback时，只需要删除log4j相关的jar,然后加入logback相关的jar和日志配置文件即可，而不需要改动具体的日志输出方法，试想如果没有采用这种方式，当你的系统中日志输出有成千上万条时，你要更换日志系统将是多么庞大的一项工程。如果你开发的是一个面向公众使用的组件或公共服务模块，那么一定要使用slf4的这种形式，这有利于别人在调用你的模块时保持和他系统中使用统一的日志输出。</li>
<li>slf4j日志输出时可以使用{}占位符，如，logger.info(“testlog: {}”, “test”)，而如果只使用log4j做日志输出时，只能以logger.info(“testlog:”+”test”)这种形式，前者要比后者在性能上更好，后者采用+连接字符串时就是new 一个String 字符串，在性能上就不如前者。</li>
</ul>
<h2 id="2-log4j-log-for-java"><a href="#2-log4j-log-for-java" class="headerlink" title="2.log4j(log for java)"></a>2.log4j(log for java)</h2><p>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p>
<p><strong>如何使用？</strong></p>
<ul>
<li>引入jar,使用log4j时需要的jar为：log4j.jar。</li>
<li>定义配置文件log4j.properties或log4j.xml</li>
<li>在具体的类中进行使用：<ul>
<li>在需要日志输出的类中加入：private static final Logger logger &#x3D; Logger.getLogger(Tester.class); &#x2F;&#x2F;通过Logger获取Logger实例</li>
<li>在需要输出日志的地方调用相应方法即可：logger.debug(“System …..”)</li>
</ul>
</li>
</ul>
<p>关于如何单独使用log4j，建议详细阅读以下文章：</p>
<p><a href="https://blog.csdn.net/u012422446/article/details/51199724">https://blog.csdn.net/u012422446/article/details/51199724</a></p>
<p><a href="https://blog.csdn.net/azheng270/article/details/2173430/">https://blog.csdn.net/azheng270/article/details/2173430/</a></p>
<p><a href="http://shmilyaw-hotmail-com.iteye.com/blog/2410764">http://shmilyaw-hotmail-com.iteye.com/blog/2410764</a></p>
<h2 id="3-logback"><a href="#3-logback" class="headerlink" title="3.logback"></a>3.logback</h2><p> logback同样是由log4j的作者设计完成的，拥有更好的特性，用来取代log4j的一个日志框架,是slf4j的原生实现(即直接实现了slf4j的接口，而log4j并没有直接实现，所以就需要一个适配器slf4j-log4j12.jar),logback一共有以下几个模块：</p>
<ul>
<li>logback-core：其它两个模块的基础模块</li>
<li>logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4j API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging</li>
<li>logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能</li>
</ul>
<p>同样，单独使用它时，需要引入以上jar,然后进行配置文件的配置，最后就是在相关类中进行使用，使用时加入以下语句:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">　　<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line"> 　logger.info(<span class="string">&quot;打印日志&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>对于logback的使用，详细使用方法及配置推荐阅读以下文章：</p>
<p><a href="https://www.cnblogs.com/warking/p/5710303.html">https://www.cnblogs.com/warking/p/5710303.html</a></p>
<h2 id="4-总结如下："><a href="#4-总结如下：" class="headerlink" title="4.总结如下："></a>4.总结如下：</h2><p>1、slf4j是java的一个日志门面，实现了日志框架一些通用的api，log4j和logback是具体的日志框架。</p>
<p>2、他们可以单独的使用，也可以绑定slf4j一起使用。</p>
<p>单独使用，分别调用框架自己的方法来输出日志信息。绑定slf4j一起使用。调用slf4j的api来输入日志信息，具体使用与底层日志框架无关（需要底层框架的配置文件）。显然不推荐单独使用日志框架。假设项目中已经使用了log4j，而我们此时加载了一个类库，而这个类库依赖另一个日志框架。这个时候我们就需要维护两个日志框架，这是一个非常麻烦的事情。而使用了slf4j就不同了，由于应用调用的抽象层的api，与底层日志框架是无关的，因此可以任意更换日志框架。</p>
<p>这篇文章主要是来帮大家理清 slf4j，log4j，logback之间的关系，对于使用及相关配置文件的详细配置不做说明，对于具体的使用参考文章末尾相关参考链接。</p>
<p>最后，送上slf4j和log4j整合使用时的一些参考链接</p>
<p><a href="https://blog.csdn.net/javaloveiphone/article/details/52486257">https://blog.csdn.net/javaloveiphone/article/details/52486257</a> （log桥接工具jcl-over-slf4j使用，项目排除commons-logging依赖的影响）</p>
<p><a href="https://blog.csdn.net/minicto/article/details/52672472">https://blog.csdn.net/minicto/article/details/52672472</a></p>
<p><a href="https://blog.csdn.net/foreverling/article/details/51385128">https://blog.csdn.net/foreverling/article/details/51385128</a></p>
<p><a href="https://www.cnblogs.com/junzi2099/p/7930268.html#_label6">https://www.cnblogs.com/junzi2099/p/7930268.html#_label6</a></p>
<p><a href="https://www.cnblogs.com/chenhongliang/p/5312517.html">https://www.cnblogs.com/chenhongliang/p/5312517.html</a> (java常用日志框架介绍)</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/spring-data-jpa/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="jpa教程"><a href="#jpa教程" class="headerlink" title="jpa教程"></a>jpa教程</h1><p><a href="https://segmentfault.com/a/1190000037755804">https://segmentfault.com/a/1190000037755804</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/springdoc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="spring-openapi-ui使用"><a href="#spring-openapi-ui使用" class="headerlink" title="spring-openapi-ui使用"></a>spring-openapi-ui使用</h1><p>swagger似乎已经不再维护了,不推荐再使用了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.0</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以替换为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;latest-version&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>文档在这里<br><a href="https://springdoc.org/#migrating-from-springfox">https://springdoc.org/#migrating-from-springfox</a><br>​</p>
<p><a href="https://blog.csdn.net/m0_47333020/article/details/109776819">https://blog.csdn.net/m0_47333020&#x2F;article&#x2F;details&#x2F;109776819</a><br>​</p>
<h2 id="添加全局token"><a href="#添加全局token" class="headerlink" title="添加全局token"></a>添加全局token</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@OpenAPIDefinition(</span></span><br><span class="line"><span class="meta">        info = @Info(</span></span><br><span class="line"><span class="meta">                title = &quot;Swagger3&quot;,</span></span><br><span class="line"><span class="meta">                version = &quot;1.0&quot;,</span></span><br><span class="line"><span class="meta">                description = &quot;Swagger3使用演示&quot;,</span></span><br><span class="line"><span class="meta">                contact = @Contact(name = &quot;TOM&quot;)</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        security = @SecurityRequirement(name = &quot;token&quot;),</span></span><br><span class="line"><span class="meta">        externalDocs = @ExternalDocumentation(description = &quot;参考文档&quot;,</span></span><br><span class="line"><span class="meta">                url = &quot;https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations&quot;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@SecurityScheme(type = SecuritySchemeType.APIKEY, name = &quot;token&quot;, in = SecuritySchemeIn.HEADER)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">docker</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .packagesToScan(<span class="string">&quot;com.example.springtransfer.controller&quot;</span>)</span><br><span class="line">                .group(<span class="string">&quot;api&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/**&quot;</span>).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加多个header"><a href="#添加多个header" class="headerlink" title="添加多个header"></a>添加多个header</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@OpenAPIDefinition(</span></span><br><span class="line"><span class="meta">        info = @Info(</span></span><br><span class="line"><span class="meta">                title = &quot;Swagger3&quot;,</span></span><br><span class="line"><span class="meta">                version = &quot;1.0&quot;,</span></span><br><span class="line"><span class="meta">                description = &quot;Swagger3使用演示&quot;,</span></span><br><span class="line"><span class="meta">                contact = @Contact(name = &quot;TOM&quot;)</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        security =&#123; @SecurityRequirement(name = &quot;usersOrigin&quot;), @SecurityRequirement(name = &quot;Authorization&quot;)&#125;,</span></span><br><span class="line"><span class="meta">        externalDocs = @ExternalDocumentation(description = &quot;参考文档&quot;,</span></span><br><span class="line"><span class="meta">                url = &quot;https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations&quot;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SecuritySchemes(&#123;@SecurityScheme(type = SecuritySchemeType.APIKEY, name = &quot;Authorization&quot;, in = SecuritySchemeIn.HEADER), @SecurityScheme(type = SecuritySchemeType.APIKEY, name = &quot;usersOrigin&quot;, in = SecuritySchemeIn.HEADER)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">docker</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .packagesToScan(<span class="string">&quot;com.example.springtransfer.controller&quot;</span>)</span><br><span class="line">                .group(<span class="string">&quot;api&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/**&quot;</span>).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加参数注解"><a href="#添加参数注解" class="headerlink" title="添加参数注解"></a>添加参数注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Tag(name = &quot;操作接口&quot;, description = &quot;操作描述&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;hs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HsApi</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HsService hsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HsTypeService hsTypeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;添加&quot;, description = &quot;添加描述&quot;)</span></span><br><span class="line">    <span class="meta">@Parameters(&#123;</span></span><br><span class="line"><span class="meta">            @Parameter(name = &quot;name&quot;, description = &quot;名字&quot;, required = true),</span></span><br><span class="line"><span class="meta">            @Parameter(name = &quot;typeId&quot;, description = &quot;类型ID&quot;, required = true)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">add</span><span class="params">(String name, Long typeId)</span> &#123;</span><br><span class="line">        <span class="type">HsType</span> <span class="variable">hsType</span> <span class="operator">=</span> hsTypeService.findById(typeId);</span><br><span class="line">        <span class="type">Hs</span> <span class="variable">hs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hs</span>();</span><br><span class="line">        hs.setName(name);</span><br><span class="line">        hs.setType(hsType);</span><br><span class="line">        hs.setDateCreated(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        hs = hsService.save(hs);</span><br><span class="line">        <span class="keyword">return</span> JSONObject.parseObject(JSONObject.toJSONString(hs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;获取&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">get</span><span class="params">(<span class="meta">@Parameter(name = &quot;id&quot;, description = &quot;数据ID&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">Hs</span> <span class="variable">hs</span> <span class="operator">=</span> hsService.findById(id);</span><br><span class="line">        <span class="keyword">return</span> JSONObject.parseObject(JSONObject.toJSONString(hs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="spring-security和shiro屏蔽了swagger-ui的api"><a href="#spring-security和shiro屏蔽了swagger-ui的api" class="headerlink" title="spring-security和shiro屏蔽了swagger-ui的api"></a>spring-security和shiro屏蔽了swagger-ui的api</h2><p>对于spring-security</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    web.ignoring().antMatchers(<span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/index.html&quot;</span>, <span class="string">&quot;/img/**&quot;</span>, <span class="string">&quot;/fonts/**&quot;</span>, <span class="string">&quot;/favicon.ico&quot;</span>, <span class="string">&quot;/verifyCode&quot;</span>,<span class="string">&quot;/swagger-ui/*&quot;</span>,<span class="string">&quot;/v2/api-docs/**&quot;</span>,<span class="string">&quot;/v3/api-docs/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/swagger-resources&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/swagger-resources/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/configuration/ui&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/configuration/security&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/swagger-ui.html/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/webjars/**&quot;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于shiro</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;shiroFilter&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilter</span><span class="params">(SecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (UtilValidate.isEmpty(loginpage)) loginpage = <span class="string">&quot;login.html&quot;</span>;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        shiroFilter.setSecurityManager(securityManager);</span><br><span class="line">        shiroFilter.setLoginUrl(<span class="string">&quot;/&quot;</span> + loginpage);</span><br><span class="line">        shiroFilter.setUnauthorizedUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">&quot;/pobstyle.css&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/statics/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/&quot;</span> + loginpage, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/sys/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/favicon.ico&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/captcha.jpg&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">        <span class="comment">//swagger请求不拦截</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/swagger/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/v3/api-docs&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/swagger-ui.html&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/swagger-resources/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        shiroFilter.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        shiroFilter.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        <span class="keyword">return</span> shiroFilter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>springboot shiro swagger的项目，shiro已经对swagger的资源放行了，但是只要有@RequiresPermissions注解的controller，swagger就读取不到</p>
<p>需要设置aop</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title function_">defaultAdvisorAutoProxyCreator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">DefaultAdvisorAutoProxyCreator</span> <span class="variable">defaultAdvisorAutoProxyCreator</span> <span class="operator">=</span> </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span>();</span><br><span class="line">    defaultAdvisorAutoProxyCreator.setUsePrefix(<span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/swaggerui/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="使用swaggerui"><a href="#使用swaggerui" class="headerlink" title="使用swaggerui"></a>使用swaggerui</h1><p>:::warning</p>
<p>不推荐使用</p>
<p>:::</p>
<h2 id="swaggerui配置"><a href="#swaggerui配置" class="headerlink" title="swaggerui配置"></a>swaggerui配置</h2><h3 id="添加swaggerui依赖"><a href="#添加swaggerui依赖" class="headerlink" title="添加swaggerui依赖"></a>添加swaggerui依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在主类添加注解-EnableOpenApi"><a href="#在主类添加注解-EnableOpenApi" class="headerlink" title="在主类添加注解: @EnableOpenApi"></a>在主类添加注解: <code>@EnableOpenApi</code></h3><h3 id="最后添加配置类和拦截器类"><a href="#最后添加配置类和拦截器类" class="headerlink" title="最后添加配置类和拦截器类"></a>最后添加配置类和拦截器类</h3><p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableOpenApi</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.qgzx.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docker</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 构造函数传入初始化规范，这是swagger2规范</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.OAS_30)</span><br><span class="line">                <span class="comment">//apiInfo： 添加api详情信息，参数为ApiInfo类型的参数，这个参数包含了第二部分的所有信息比如标题、描述、版本之类的，开发中一般都会自定义这些信息</span></span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .groupName(<span class="string">&quot;group&quot;</span>)</span><br><span class="line">                <span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问，默认是true</span></span><br><span class="line">                .enable(<span class="literal">true</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//apis： 添加过滤条件,</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;cn.hellohao.controller&quot;</span>))</span><br><span class="line">                <span class="comment">//paths： 这里是控制哪些路径的api会被显示出来，比如下方的参数就是除了/user以外的其它路径都会生成api文档</span></span><br><span class="line"></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;名字：name&quot;</span>, <span class="string">&quot;个人链接：http://xxx.xxx.com/&quot;</span>, <span class="string">&quot;邮箱：XXX&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(</span><br><span class="line">                <span class="string">&quot;标题内容&quot;</span>,</span><br><span class="line">                <span class="string">&quot;描述内容&quot;</span>,</span><br><span class="line">                <span class="string">&quot;版本内容：v1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;链接：http://terms.service.url/&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;许可：Apach 2.0 &quot;</span>,</span><br><span class="line">                <span class="string">&quot;许可链接：XXX&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 拦截器类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerUiWebMvcConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String baseUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SwaggerUiWebMvcConfigurer</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Value(&quot;$&#123;springfox.documentation.swagger-ui.base-url:&#125;&quot;)</span> String baseUrl)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baseUrl = baseUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">baseUrl</span> <span class="operator">=</span> StringUtils.trimTrailingCharacter(<span class="built_in">this</span>.baseUrl, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        registry.</span><br><span class="line">                addResourceHandler(baseUrl + <span class="string">&quot;/swagger-ui/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/springfox-swagger-ui/&quot;</span>)</span><br><span class="line">                .resourceChain(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(baseUrl + <span class="string">&quot;/swagger-ui/&quot;</span>)</span><br><span class="line">                .setViewName(<span class="string">&quot;forward:&quot;</span> + baseUrl + <span class="string">&quot;/swagger-ui/index.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry</span><br><span class="line">                .addMapping(<span class="string">&quot;/api/pet&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;http://editor.swagger.io&quot;</span>);</span><br><span class="line">        registry</span><br><span class="line">                .addMapping(<span class="string">&quot;/v2/api-docs.*&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;http://editor.swagger.io&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置token"><a href="#配置token" class="headerlink" title="配置token"></a>配置token</h2><p>待续…</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/01/23/templates/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="java模板引擎"><a href="#java模板引擎" class="headerlink" title="java模板引擎"></a>java模板引擎</h1><p>有几个常用的模板引擎</p>
<h2 id="pebble"><a href="#pebble" class="headerlink" title="pebble"></a>pebble</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;io.pebbletemplates&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;pebble-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;<span class="number">3.1</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.docs4dev.com/docs/zh/thymeleaf/3.0/reference/using_thymeleaf.html#introducing-thymeleaf">https://www.docs4dev.com/docs/zh/thymeleaf/3.0/reference/using_thymeleaf.html#introducing-thymeleaf</a><br>​</p>
<p>thymeleaf fragments<br><a href="https://blog.csdn.net/weixin_41999594/article/details/117786639">https://blog.csdn.net/weixin_41999594&#x2F;article&#x2F;details&#x2F;117786639</a></p>
<h2 id="freemarker"><a href="#freemarker" class="headerlink" title="freemarker"></a>freemarker</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="velocity"><a href="#velocity" class="headerlink" title="velocity"></a>velocity</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-velocity&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>人际交往小技巧</title>
    <url>/2020/06/10/%E4%BA%BA%E9%99%85%E4%BA%A4%E5%BE%80%E5%B0%8F%E6%8A%80%E5%B7%A7(1)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><p>作者：中天月<br>链接：<a href="https://www.zhihu.com/question/26457306/answer/32844615">https://www.zhihu.com/question/26457306/answer/32844615</a></p>
<p><strong>人们倾向于记住最先发生的事情和最后发生的事情。</strong>中间的事情记不清楚。所以，如果你要做自我介绍的话，最好做第一个或者最后一个。面试的时候，也是一样的。</p>
<p><strong>如果你在酒吧或者前台工作，在你身后放一面镜子。</strong>这样的话，当顾客发脾气的时候，就能从镜子里看到自己的丑恶嘴脸。一面镜子可以显著降低他们无理取闹的概率。</p>
<p><strong>报价之后，不再说话。</strong>如果你是做销售工作的，这项技巧很有用。在其他领域，这项技巧也很有用。我之前干过一份工作，是在一家体育馆卖会员卡。有个老家伙就是这么指导我的，他说，一旦你和顾客寒暄完毕，报出了你的价格。从此时开始，先开口的那个就输了。看起来好像毫无根据，但确实是这个样子的。通常会有很长时间的尴尬沉默，但是，最终，顾客会买的。</p>
<p><strong>如果你问了别人一个问题，然后他们回答了一半，你等着，他们会说完的。</strong>只要等着，保持眼神接触，最终，他们会开口讲完的。</p>
<p><strong>公开讲话或者蹦极之前这种会紧张的时刻，嚼口香糖就好了。</strong>据说是因为人类在危险的时候会自动停止咀嚼（吃东西），所以吃东西的时候就是安全的，大脑就是这么告诉你的。反正这招对我很管用。</p>
<p><strong>人们最终记住的不是你说过的话，而是你让他们产生的感觉。</strong>几乎所有的人都喜欢谈论自己的事情，所以，多问问题。</p>
<p><strong>当你学习新东西的时候，尝试着教给朋友们，或者让他们问你相关的问题。</strong>如果你能教给人一杯水，你自己一定会有一桶水。</p>
<p><strong>如果你看到某人时，很开心，溢于言表的开心，那么他们以后看到你也会手舞足蹈的。</strong>第一次也许不是这样，但第二次一定是。</p>
<span id="more"></span>
<p><strong>身体对压力的反应——呼吸加速，心跳加快——和鼓起勇气时的反应是一样的。</strong>所以是好是歹，全在你一念之间。反正你的身体已经都准备好了，你看着办吧。</p>
<p><strong>注意别人的脚。</strong>当你加入别人的谈话时，发现别人只是把上半身转过来了，脚还是维持原来的方向，那就说明他们不欢迎你的加入。类似的，你和你的同事谈话时，你觉得他在专心和你谈话，他的身体也面向你，但他的脚却不是朝向你的，他可能早就已经受不了这场谈话了。</p>
<p><strong>装出牛逼的样子，直到你做到了；信心比知道更重要。</strong>别被任何人吓住，生活不易，全靠演技，那些吓你的人也在演戏。</p>
<p><strong>你假装成什么样子，你最终就会成为什么样子。</strong>装逼得逼，求仁成仁，念念不忘，必有回响。</p>
<p><strong>虽然不是要你去吓人，但如果你一定要厚颜无耻的盯着某人，视线聚集在他的两只眼睛中间，等着他们害羞。</strong>如果他们移开视线，他们就不会再看着你。这个时候，你就可以肆无忌惮的盯着他们的眼睛了。至少有45秒的时间哦。</p>
<p><strong>建立人际网络。</strong>成为朋友们的信息源，当然，他们也会是你的信息源。和前同事一起喝杯酒吧，也是好的。</p>
<p><strong>如果你前面的车子慢的像是老爷爷在开，你恨不得杀了他。</strong>假装他真的是你的亲爷爷。 然后你的怒气就全消了。</p>
<p><strong>站得直。</strong> 不许没精打采，不许手插兜，头要高高抬起。不要觉得这是陈词滥调。你自己会因此觉得很好，而且周围的人也会感受到你的自信。</p>
<p><strong>不要说“我觉得”、“我认为”，除非真的有必要。</strong>这些词语会让你和自信无缘，对你可没什么好处。</p>
<p><strong>焦虑的时候，收拾一下家里或者工作桌。</strong>你会比之前更开心、更有感觉。</p>
<p><strong>第一次饭，第一支酒，你请。</strong>你都不知道你自己会因此而自我感觉良好多久。</p>
<p><strong>为人父母者请注意：给孩子们选择的权利，让他们认为自己掌控自己的生活。</strong>比如我想让孩子自己穿鞋的时候，我会问他“你是想穿那双星星的，还是鲨鱼的？”。值得注意的是，这招对成年人也管用。</p>
<p><strong>态度决定行动，可是行动也决定态度。</strong>就像我以前的一个老师说的那样：你可以因为高兴而跳起舞来，也可以故意跳起舞来让自己高兴。</p>
<p><strong>一群人在大笑的时候，人们会立刻看向这群人里最亲近的人。</strong></p>
<p><strong>如果你想和某人建立密切的关系，或者获得某人的信任，学习他的身体的姿势。</strong>如果他翘起二郎腿，你也翘起来。如果他斜靠在椅背上，你也斜靠在椅背上，如果他身体前倾，你也身体前倾。模仿身体姿势，是一种下意识的信任对方和自在的表现。如果你在胸前交叉双臂时发现某人随即也这么做了，恭喜你，你又迷住了一个人。</p>
<p><strong>本杰明·富兰克林效应。</strong>在学生时代，找女生借铅笔、借笔记、求她帮你补习功课，比起借给她东西、帮她补习功课，女生更容易爱上找她借铅笔的那个穷&#x2F;笨小子。调情的时候这也很有用，比如（开玩笑似的）让女孩请你喝支酒。这可是一石三鸟的事情：你得到了好处；她会下意识的更喜欢你；将来她接受你的“帮助”也会更加没有负担。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>人际关系</tag>
      </tags>
  </entry>
  <entry>
    <title>十大顶级思维</title>
    <url>/2020/08/24/%E5%8D%81%E5%A4%A7%E9%A1%B6%E7%BA%A7%E6%80%9D%E7%BB%B4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><p>1.墨菲定律</p>
<p>   如果有两种或两种以上的方式去做某件事情，而其中一种选择方式将导致灾难，则必定有人会做出这种选择。</p>
<p>2.波克定理</p>
<p>只有在争辩中，才可能诞生最好的主意和最好的决定。</p>
<p>3.奥格尔维法则</p>
<p>如果我们每个人都雇用比我们自己都更强的人，我们就能成为巨人公司。</p>
<p>4.美既好效应</p>
<p>对一个外表英俊漂亮的人，人们很容易误认为他或她的其他方面也很不错。</p>
<p>5.蓝斯登定律</p>
<p>和一位朋友一起工作，远较在父亲之下工作有趣得多。</p>
<p>6.洛伯定理</p>
<p>对于一个经理人来说，最要紧的不是你在场时的情况，而是你不在场时发生了什么。</p>
<p>7。刺猬理论</p>
<p>刺猬在天冷时彼此靠拢取暖但保持一定距离，以免互相刺伤。</p>
<p>8.托利得定理</p>
<p>测验一个人的智力是否属于上乘，只看脑子里能否同时容纳两种相反的思想而无碍于其处世行事。</p>
<p>9.沃尔森法则</p>
<p>把信息和情报放在第一位，金钱就会滚滚而来。</p>
<p>10.吉德林法则</p>
<p>把难题清清楚楚地写出来，问题便已经解决了一半。</p>
]]></content>
      <categories>
        <category>思维</category>
      </categories>
      <tags>
        <tag>思维模式</tag>
      </tags>
  </entry>
  <entry>
    <title>生活</title>
    <url>/2021/12/10/%E6%B2%9F%E9%80%9A%E4%BA%A4%E6%B5%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h3 id="人生名言-RIchKing"><a href="#人生名言-RIchKing" class="headerlink" title="人生名言@RIchKing"></a>人生名言@RIchKing</h3><p>1，话别说太满，人别熟太快。</p>
<p>2，别人自嘲可以，但你千万别附和。</p>
<p>3，不要把别人想得太坏，也不要把别人想得太好，都是凡人。</p>
<p>4，可以嘲笑你的朋友，但不能嘲笑他喜欢的东西。</p>
<p>5，把每一句“我不会”都改成“我可以学”。</p>
<span id="more"></span>

<p>6，刚开始和对方不熟悉的时候，聊到晚上十点多对方发来消息就别回复了，第二天早晨再回复，这样又可以聊一天。</p>
<p>7，把“随便”改成“听你的”。</p>
<p>8，别人骂你你要听，别人夸你你别信。</p>
<p>9，请道歉而不是取笑别人开不起玩笑，你以为谁没有底线只不过还没到底而已。</p>
<p>10，聊天时别人发微笑，你不知道怎么回的话，就回，你笑得真好看。</p>
<p>11，能用表情包解决的就不要说脏话！</p>
<p>12，恰到好处的装逼，适可而止的套路。</p>
<p>13，如果一个人不理你，有可能是对方的问题；如果大家都不理你，那你就要考虑自身问题了。</p>
<p>14，人前不应该说的话，背后也别说。</p>
<p>15，在最愤怒时忍住最伤人对方的那句话。</p>
<p>16，如果没有十足的把握和必要，就不要轻易说假话。</p>
<p>17，不要把负能量带给身边的人。</p>
<p>18，不要吝啬你的赞美和表达爱意的语言。</p>
<p>19，女孩子永远抗拒不了陪她通宵聊天的人。</p>
<p>20，刻薄嘴欠和幽默是两回事；口无遮拦和坦率是两回事；没有教养和随性是两回事；轻重不分和耿直是两回事。</p>
<p>21，真的不必把太多人请进生命里，太多热情总是不被珍惜。</p>
<p>22，如果遇到了傻 Ⅹ，不要与他争论，而且要同意他的一切观点，把他培养成大傻 Ⅹ。</p>
<p>23，把“听明白了吗”换成“我说明白了吗”。</p>
<p>24，不能侮辱别人的 idol，谨记！</p>
<p>25，在拒绝这件事上，越简单越好，明明是别人需求自己帮忙，解释半天变成自己亏欠了别人的感觉，帮得上，想帮就帮，帮不上，就拒绝。人际交往，简单明了有时最恰当，懂得拒绝，才可以洒脱不纠结。</p>
<p>26，逢人只说三分话，未可全抛一片心。</p>
<p>27，不要在公众场合揭别人的短处，让别人难堪。</p>
<p>28，社交没那么容易，每个人都有他的手机。</p>
<p>29，看透不说透，还是好朋友。</p>
<p>30，当你往上爬的时候对别人好一点，因为你走下坡路的时候会遇到他们。</p>
<p>31，颜值要高，脾气要好，原则要有。</p>
<p>32，该叫阿姨的叫姐，该叫姐的叫美女该叫美女的叫妹子。</p>
<p>33，学会拒绝，没人会感激你的善良，他们只会得寸进尺。</p>
<p>34，自嘲是最高境界，而不是嘲笑别人。</p>
<p>35，请不要随意出卖一个朋友的隐私来取悦另一个不熟的朋友。</p>
<p>36，有分寸的信任，有理由的怀疑。</p>
<p>37，把身材练好，把妆化好。</p>
<p>38，不会讲话时别瞎说沉默微笑更好。</p>
<p>39，最印象的一句话，“交友不必言尽，言尽则无友”。</p>
<p>40，越是亲近的人越要用心对待，一句随意的话会伤害她。</p>
<p>41，修得豆腐嘴，藏得刀子心。</p>
<p>42，千万不要为了恋爱而淡了身边所有人。</p>
<p>43，清醒时做事，糊涂时读书，大怒时睡觉，独处时思考。</p>
<p>44，永远不要听信别人口中的他。</p>
<p>45，女生之间的嫉妒心太可怕，不要公开说这个女生比那个好看。</p>
<p>46，不要人后捅刀子嘴别贱。</p>
<p>47，践踏别人的梦想等同于谋杀。</p>
<p>48，常与同好争高下，不共傻瓜论短长。——出自《欢乐颂》</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>人际关系</tag>
        <tag>情商</tag>
      </tags>
  </entry>
</search>
